let resultForMail = " ";
let selectedAnswersText = [];
//let resultString = " ";
document.addEventListener("DOMContentLoaded", function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const yesBtn = document.getElementById("yes-btn");
    const noBtn = document.getElementById("no-btn");
    const startBtn = document.querySelector(".start-btn");
    const nextBtn = document.querySelectorAll(".next-btn");
   //const nextBtnBel = document.getElementById(".next-btn-bel");
    const entWishBtn = document.getElementById('enterWishBtn'); 
    const answers = document.querySelectorAll(".answer");

    const frames = [
        document.getElementById("frame1"),
        document.getElementById("frame2"),
        document.getElementById("frame3"),
        document.getElementById("frame4"),
        document.getElementById("frame5"),
        document.getElementById("frame6"),
        document.getElementById("frame7"),
        document.getElementById("frame8"),
        document.getElementById("frame9"),
        document.getElementById("frame10"),
        document.getElementById("frame11"),
        document.getElementById("frame12"),
        document.getElementById("frame13"),
        document.getElementById("frame14"),
        document.getElementById("frame15")
    ];

    // –¢–µ–∫—É—â–∏–π —Ñ—Ä–µ–π–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let currentFrameIndex = 0;
    let results = { "‚è≥": 0, "ü§ó": 0, "üéÅ": 0, "üí¨": 0 };

    // ========================
    // –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    // ========================

    // 1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ—Ä–µ–π–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (Of course)
    yesBtn.addEventListener("click", () => handleYesButton());
    function handleYesButton() {
        switchFrame(frames[0], frames[1]);
        let audio = document.getElementById("background-music");
        audio.volume = 0.5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å (–æ—Ç 0.0 –¥–æ 1.0)
    
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É —Å—Ä–∞–∑—É
        let playPromise = audio.play();

        // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (playPromise !== undefined) {
            playPromise.catch(() => {
            document.addEventListener('click', () => {
                audio.play();
            }, { once: true }); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        });
    }
        audio.play();
    }
    // 2. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É (Start)
    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 1) {
            switchFrame(frames[1], frames[2]);
        }
    })

    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 11) {
            switchFrame(frames[11], frames[12]);
        }
    })

    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 13) {
            switchFrame(frames[13], frames[14]);
        }
    })


    startBtn.addEventListener("click", () => switchFrame(frames[2], frames[3]));
    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    answers.forEach(answer => {
        answer.addEventListener("click", () => handleAnswerClick(answer));
    });

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ NEXT
    nextBtn.forEach((btn, index) => {
        btn.addEventListener("click", () => handleNextButton(index));
    });
    entWishBtn.addEventListener("click", () => switchFrame(frames[12], frames[13]));

    // nextBtnBel.forEach((btn, index) => {
    //     btn.addEventListener("click", () => switchFrame(frames[10], frames[11]));
    // });
    
    


    // 5. –£–±–µ–≥–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ "Nope"
        document.addEventListener("mousemove", moveButton);

    let targetX = 0, targetY = 0;
    let isMoving = false;

    function moveButton(event) {
        const btnRect = noBtn.getBoundingClientRect();
        const distance = Math.sqrt(
            Math.pow(event.clientX - (btnRect.left + btnRect.width / 2), 2) +
            Math.pow(event.clientY - (btnRect.top + btnRect.height / 2), 2)
        );

        if (distance < 350 && !isMoving) {
            const { x, y } = getRandomPosition();
            targetX = x;
            targetY = y;
            isMoving = true;
            animateButton();
        }
    }

    function getRandomPosition() {
        return {
            x: Math.max(0, Math.min(
                Math.random() * (window.innerWidth - noBtn.offsetWidth),
                window.innerWidth - noBtn.offsetWidth
            )),
            y: Math.max(0, Math.min(
                Math.random() * (window.innerHeight - noBtn.offsetHeight),
                window.innerHeight - noBtn.offsetHeight
            ))
        };
    }

    function animateButton() {
        let startX = parseFloat(noBtn.style.left) || 0;
        let startY = parseFloat(noBtn.style.top) || 0;
        let progress = 0;
        let speed = 0.05; // –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ø–ª–∞–≤–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

        function step() {
            progress += speed;
            if (progress >= 1) {
                progress = 1;
                isMoving = false;
            }
            
            noBtn.style.left = `${lerp(startX, targetX, progress)}px`;
            noBtn.style.top = `${lerp(startY, targetY, progress)}px`;
            
            if (progress < 1) {
                requestAnimationFrame(step);
            }
        }

        requestAnimationFrame(step);
    }

    function lerp(start, end, t) {
        return start + (end - start) * t;
    }


    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function switchFrame(currentFrame, nextFrame) {
        if(currentFrameIndex > 1 && currentFrameIndex < 10){
        
        currentFrame.classList.add("hidden-right");
        }
        else{
            currentFrame.classList.add("hidden-down");
        }
        setTimeout(() => {
            currentFrame.style.display = "none";
            nextFrame.style.display = "flex";
            currentFrameIndex+=1

        }, 500);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤


function handleAnswerClick(answer) {
    const selectedAnswers = document.querySelectorAll(".answer.selected");
    const answerText = answer.textContent.trim(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

    if (answer.classList.contains("selected")) {
        // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
        answer.classList.remove("selected");
        results[answer.dataset.emoji] -= 1;

        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        selectedAnswersText = selectedAnswersText.filter(text => text !== answerText);
    } else if (selectedAnswers.length < 2) {
        // –í—ã–±–æ—Ä (–º–∞–∫—Å–∏–º—É–º 2 –æ—Ç–≤–µ—Ç–∞)
        answer.classList.add("selected");
        results[answer.dataset.emoji] += 1;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
        selectedAnswersText.push(answerText);
    }

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–µ–¥–µ–º –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(selectedAnswersText);
}


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ NEXT
    function handleNextButton(btnIndex) {
        // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        document.querySelectorAll(".answer.selected").forEach(answer => {
            answer.classList.remove("selected");
        });

         //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ—Ä–µ–π–º—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
         if (currentFrameIndex < 9 || currentFrameIndex >9 ) { // 7 –≤–æ–ø—Ä–æ—Å–æ–≤ (frame3-frame9)
             switchFrame(frames[currentFrameIndex], frames[currentFrameIndex + 1]);
             
         } else if(currentFrameIndex ==9) {
             switchFrame(frames[currentFrameIndex], frames[10]);
             showResults();
         }
        
    }

    //Mostrar resultados
    // fun√ß√£o showResults() {
    // const resultText = document.getElementById("texto-resultado");
    // const maxEmoji = Object.entries(resultados).reduce(
    // (a, b) => a[1] > b[1] ? uma: b
    // )[0];
        
    // // Textos de resultados (podem ser personalizados)
    // const resultMessages = {
    // "‚è≥": "Seu estilo de amor: Tempo juntos! üï∞Ô∏è",
    // "ü§ó": "Seu estilo de amor: Intimidade f√≠sica! üíû",
    // "üéÅ": "Seu estilo de amor: Presentes e carinho! üéÄ",
    // "üí¨": "Seu estilo de amor: palavras de encorajamento! üíå"
    // };
        
    //     resultText.textContent = resultMessages[maxEmoji];
    // }

    // ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    
    function showResults() {
    const resultText = document.getElementById("result-text");
    const resultDescriptionText = document.getElementById("result-description-text");
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let resultHTML;
    let resultDescText;
    let switchResult;
    if(getMaxResult().length > 1){
        let switchResultArray = getMaxResult().split(",");
        switchResult = switchResultArray[0];
        console.log(switchResult);
    }   
    else {
        switchResult = getMaxResult();
    }
    
    switch(switchResult)
    {
        case '‚è≥': resultHTML =` <div class="result-title">Seu estilo de amor: ¬´TEMPO JUNTOS¬ª:</div>`;
                    resultDescText = `<div class="result-title">Voc√™ valoriza o tempo gasto</div>
                                    <div class="result-title">com seu ente querido.</div>
                                    <div class="result-title">O mais importante para voc√™ √© a aten√ß√£o</div>
                                    <div class="result-title"> e momentos juntos ‚è≥ </div>
                                        
                    `;
                    resultadoParaCorreio = "‚è≥";
        quebrar;

        case 'ü§ó': resultHTML =` <div class="result-title">Seu estilo de amor: ¬´TOQUE¬ª:</div>`;
                    resultDescText = `<div class="result-title">Voc√™ valoriza a intimidade f√≠sica: </div>
                                        <div class="result-title">abra√ßos, beijos, m√£os dadas.</div>
                                        <div class="result-title">Esta √© sua principal linguagem de amorü§ó </div>
                    `;
                    resultadoParaCorreio = "ü§ó";
        break;
        case 'üéÅ': resultHTML =` <div class="result-title">Seu estilo de amor: ¬´PRESENTES¬ª:</div>`;
                    resultDescText = `<div class="result-title">Os sinais s√£o importantes para voc√™</div>
                                        <div class="result-title">Aten√ß√£o e surpresas.</div>
                                        <div class="result-title">Voc√™ adora agradar e</div>
                                        <div class="result-title">Receba presentes,</div>
                                        <div class="result-title">cheio de significado üéÅ </div>
                    
                    `;
                    resultForMail = "üéÅ";
        break;
        case 'üí¨':resultHTML =` <div class="result-title">Seu estilo de amor: ¬´PALAVRAS DE ENCORAJAMENTO¬ª:</div>`;
                resultDescText = `<div class="result-title">Voc√™ expressa sentimentos por meio da gratid√£o üí¨ </div>
                                    <div class="result-title">elogios, reconhecimento e apoio.</div>
                                    <div class="result-title">Palavras calorosas s√£o importantes para voc√™</div>
                                    <div class="result-title">Obrigado üí¨</div>
                `;  
                resultadoParaCorreio = "üí¨";
        break;
        default:
            resultHTML =` <div class="result-title">${getMaxResult()}</div>`;

    }

    resultText.innerHTML = resultHTML;
    resultDescriptionText.innerHTML = resultDescText;
    //document.getElementById("frame11").style.display = "flex";
}

function getMaxResult() {
    const max = Math.max(...Object.values(results));
    const emojis = Object.entries(results)
        .filter(([_, value]) => value === max)
        .map(([emoji]) => emoji);
        
    return emojis.join(",");
}
document.addEventListener("DOMContentLoaded", function () {
    const compliments = document.querySelectorAll(".compliment");

    compliments.forEach((compliment, index) => {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
        setTimeout(() => {
            compliment.style.animation = "fadeInUp 1s forwards";
        }, index * 500); // –ö–∞–∂–¥—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º
    document.getElementById("frame12").style.display = "flex";
});

});




document.getElementById('enterWishBtn').addEventListener('click', function() {

    console.log('number:', resultForMail);
    

    const wish1 = document.getElementById('wish1').value;
    const wish2 = document.getElementById('wish2').value;
    const wish3 = document.getElementById('wish3').value;
    const wish4 = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞" + String(resultForMail);
    const resultString = selectedAnswersText.join(", ");

    const message = `1. ${wish1}\n2. ${wish2}\n3. ${wish3}\n4.${wish4}\n –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:${resultString}\n`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS
    emailjs.init('2oLkdF0MbjFbovK35'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à User ID –∏–∑ EmailJS

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    emailjs.send('service_vvz1cvm', 'template_n3qxkku', {
        message: message
    }).then(function(response) {
        //alert('–í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    }, function(error) {
        //alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + JSON.stringify(error));
    });
    
});
