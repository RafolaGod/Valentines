document.addEventListener("DOMContentLoaded", function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const yesBtn = document.getElementById("yes-btn");
    const noBtn = document.getElementById("no-btn");
    const startBtn = document.querySelector(".start-btn");
    const nextBtn = document.querySelectorAll(".next-btn");
   //const nextBtnBel = document.getElementById(".next-btn-bel");
    const entWishBtn = document.getElementById('enterWishBtn'); 
    const answers = document.querySelectorAll(".answer");

    const frames = [
        document.getElementById("frame1"),
        document.getElementById("frame2"),
        document.getElementById("frame3"),
        document.getElementById("frame4"),
        document.getElementById("frame5"),
        document.getElementById("frame6"),
        document.getElementById("frame7"),
        document.getElementById("frame8"),
        document.getElementById("frame9"),
        document.getElementById("frame10"),
        document.getElementById("frame11"),
        document.getElementById("frame12"),
        document.getElementById("frame13"),
        document.getElementById("frame14"),
        document.getElementById("frame15")
    ];

    // –¢–µ–∫—É—â–∏–π —Ñ—Ä–µ–π–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let currentFrameIndex = 0;
    let results = { "‚è≥": 0, "ü§ó": 0, "üéÅ": 0, "üí¨": 0 };

    // ========================
    // –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    // ========================

    // 1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ—Ä–µ–π–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (Of course)
    yesBtn.addEventListener("click", () => handleYesButton());
    function handleYesButton() {
        switchFrame(frames[0], frames[1]);
        let audio = document.getElementById("background-music");
        audio.volume = 0.5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å (–æ—Ç 0.0 –¥–æ 1.0)
    
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É —Å—Ä–∞–∑—É
        let playPromise = audio.play();

        // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (playPromise !== undefined) {
            playPromise.catch(() => {
            document.addEventListener('click', () => {
                audio.play();
            }, { once: true }); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        });
    }
        audio.play();
    }
    // 2. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É (Start)
    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 1) {
            switchFrame(frames[1], frames[2]);
        }
    })

    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 11) {
            switchFrame(frames[11], frames[12]);
        }
    })

    document.addEventListener("keydown", (e) => {
        if (e.key === " " && currentFrameIndex === 13) {
            switchFrame(frames[13], frames[14]);
        }
    })


    startBtn.addEventListener("click", () => switchFrame(frames[2], frames[3]));
    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    answers.forEach(answer => {
        answer.addEventListener("click", () => handleAnswerClick(answer));
    });

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ NEXT
    nextBtn.forEach((btn, index) => {
        btn.addEventListener("click", () => handleNextButton(index));
    });
    entWishBtn.addEventListener("click", () => switchFrame(frames[12], frames[13]));

    // nextBtnBel.forEach((btn, index) => {
    //     btn.addEventListener("click", () => switchFrame(frames[10], frames[11]));
    // });
    
    


    // 5. –£–±–µ–≥–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ "Nope"
        document.addEventListener("mousemove", moveButton);

    let targetX = 0, targetY = 0;
    let isMoving = false;

    function moveButton(event) {
        const btnRect = noBtn.getBoundingClientRect();
        const distance = Math.sqrt(
            Math.pow(event.clientX - (btnRect.left + btnRect.width / 2), 2) +
            Math.pow(event.clientY - (btnRect.top + btnRect.height / 2), 2)
        );

        if (distance < 350 && !isMoving) {
            const { x, y } = getRandomPosition();
            targetX = x;
            targetY = y;
            isMoving = true;
            animateButton();
        }
    }

    function getRandomPosition() {
        return {
            x: Math.max(0, Math.min(
                Math.random() * (window.innerWidth - noBtn.offsetWidth),
                window.innerWidth - noBtn.offsetWidth
            )),
            y: Math.max(0, Math.min(
                Math.random() * (window.innerHeight - noBtn.offsetHeight),
                window.innerHeight - noBtn.offsetHeight
            ))
        };
    }

    function animateButton() {
        let startX = parseFloat(noBtn.style.left) || 0;
        let startY = parseFloat(noBtn.style.top) || 0;
        let progress = 0;
        let speed = 0.05; // –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ø–ª–∞–≤–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

        function step() {
            progress += speed;
            if (progress >= 1) {
                progress = 1;
                isMoving = false;
            }
            
            noBtn.style.left = `${lerp(startX, targetX, progress)}px`;
            noBtn.style.top = `${lerp(startY, targetY, progress)}px`;
            
            if (progress < 1) {
                requestAnimationFrame(step);
            }
        }

        requestAnimationFrame(step);
    }

    function lerp(start, end, t) {
        return start + (end - start) * t;
    }


    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function switchFrame(currentFrame, nextFrame) {
        if(currentFrameIndex > 1 && currentFrameIndex < 10){
        
        currentFrame.classList.add("hidden-right");
        }
        else{
            currentFrame.classList.add("hidden-down");
        }
        setTimeout(() => {
            currentFrame.style.display = "none";
            nextFrame.style.display = "flex";
            currentFrameIndex+=1

        }, 500);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    function handleAnswerClick(answer) {
        const selectedAnswers = document.querySelectorAll(".answer.selected");
        
        if (answer.classList.contains("selected")) {
            // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            answer.classList.remove("selected");
            results[answer.dataset.emoji] -= 1;
        } else if (selectedAnswers.length < 2) {
            // –í—ã–±–æ—Ä (–º–∞–∫—Å–∏–º—É–º 2 –æ—Ç–≤–µ—Ç–∞)
            answer.classList.add("selected");
            results[answer.dataset.emoji] += 1;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ NEXT
    function handleNextButton(btnIndex) {
        // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        document.querySelectorAll(".answer.selected").forEach(answer => {
            answer.classList.remove("selected");
        });

         //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ—Ä–µ–π–º—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
         if (currentFrameIndex < 9 || currentFrameIndex >9 ) { // 7 –≤–æ–ø—Ä–æ—Å–æ–≤ (frame3-frame9)
             switchFrame(frames[currentFrameIndex], frames[currentFrameIndex + 1]);
             
         } else if(currentFrameIndex ==9) {
             switchFrame(frames[currentFrameIndex], frames[10]);
             showResults();
         }
        
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // function showResults() {
    //     const resultText = document.getElementById("result-text");
    //     const maxEmoji = Object.entries(results).reduce(
    //         (a, b) => a[1] > b[1] ? a : b
    //     )[0];
        
    //     // –¢–µ–∫—Å—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    //     const resultMessages = {
    //         "‚è≥": "–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: –í—Ä–µ–º—è –≤–º–µ—Å—Ç–µ! üï∞Ô∏è",
    //         "ü§ó": "–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: –§–∏–∑–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å! üíû",
    //         "üéÅ": "–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: –ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–∞–±–æ—Ç–∞! üéÄ",
    //         "üí¨": "–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: –°–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üíå"
    //     };
        
    //     resultText.textContent = resultMessages[maxEmoji];
    // }

    // ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

function showResults() {
    const resultText = document.getElementById("result-text");
    const resultDescriptionText = document.getElementById("result-description-text");
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let resultHTML;
    let resultDescText;
    let switchResult;
    if(getMaxResult().length > 1){
        let switchResultArray = getMaxResult().split(",");
        switchResult = switchResultArray[0];
        console.log(switchResult);
    }   
    else {
        switchResult = getMaxResult();
    }
    switch(switchResult)
    {
        case '‚è≥': resultHTML =` <div class="result-title">–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: ¬´–í–†–ï–ú–Ø –í–ú–ï–°–¢–ï¬ª:</div>`;
                    resultDescText = `<div class="result-title">–¢—ã —Ü–µ–Ω–∏—à—å –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–µ</div>
                                    <div class="result-title"> —Å –ª—é–±–∏–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º.</div>
                                    <div class="result-title">–ì–ª–∞–≤–Ω–æ–µ –¥–ª—è —Ç–µ–±—è ‚Äî –≤–Ω–∏–º–∞–Ω–∏–µ </div>
                                    <div class="result-title">  –∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã ‚è≥ </div>
                                        
                    `;
        break;

        case 'ü§ó': resultHTML =` <div class="result-title">–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: ¬´–ü–†–ò–ö–û–°–ù–û–í–ï–ù–ò–Ø¬ª:</div>`;
                    resultDescText = `<div class="result-title">–¢—ã —Ü–µ–Ω–∏—à—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –±–ª–∏–∑–æ—Å—Ç—å: </div>
                                        <div class="result-title">–æ–±—ä—è—Ç–∏—è, –ø–æ—Ü–µ–ª—É–∏, –¥–µ—Ä–∂–∞—Ç—å—Å—è –∑–∞ —Ä—É–∫–∏.</div>
                                        <div class="result-title"> –≠—Ç–æ —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —è–∑—ã–∫ –ª—é–±–≤–∏ü§ó </div>
                    `;
        break;
        case 'üéÅ': resultHTML =` <div class="result-title">–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: ¬´–ü–û–î–ê–†–ö–ò¬ª:</div>`;
                    resultDescText = `<div class="result-title">–î–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã –∑–Ω–∞–∫–∏   </div>
                                        <div class="result-title">–≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å—é—Ä–ø—Ä–∏–∑—ã.</div>
                                        <div class="result-title">–¢—ã –ª—é–±–∏—à—å —Ä–∞–¥–æ–≤–∞—Ç—å –∏</div>
                                        <div class="result-title"> –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏,</div>
                                        <div class="result-title">–Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–º—ã—Å–ª–æ–º üéÅ </div>
                    
                    `;
        break;
        case 'üí¨':resultHTML =` <div class="result-title">–¢–≤–æ–π —Å—Ç–∏–ª—å –ª—é–±–≤–∏: ¬´–°–õ–û–í–ê –ü–û–î–î–ï–†–ñ–ö–ò¬ª:</div>`;
                resultDescText = `<div class="result-title">–¢—ã –≤—ã—Ä–∞–∂–∞–µ—à—å —á—É–≤—Å—Ç–≤–∞ —á–µ—Ä–µ–∑   –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å üí¨ </div>
                                    <div class="result-title">–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</div>
                                    <div class="result-title">–î–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏</div>
                                    <div class="result-title">–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å üí¨</div>
                `;  
        break;
        default:resultHTML =` <div class="result-title">${getMaxResult()}</div>`;

    }

    resultText.innerHTML = resultHTML;
    resultDescriptionText.innerHTML = resultDescText;
    //document.getElementById("frame11").style.display = "flex";
}

function getMaxResult() {
    const max = Math.max(...Object.values(results));
    const emojis = Object.entries(results)
        .filter(([_, value]) => value === max)
        .map(([emoji]) => emoji);
        
    return emojis.join(",");
}
document.addEventListener("DOMContentLoaded", function () {
    const compliments = document.querySelectorAll(".compliment");

    compliments.forEach((compliment, index) => {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
        setTimeout(() => {
            compliment.style.animation = "fadeInUp 1s forwards";
        }, index * 500); // –ö–∞–∂–¥—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º
    document.getElementById("frame12").style.display = "flex";
});
document.getElementById('next-frame-button').addEventListener('click', function() {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ—Ä–µ–π–º—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞)
    alert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ—Ä–µ–π–º—É!');
});
});


document.getElementById('enterWishBtn').addEventListener('click', function() {
    const wish1 = document.getElementById('wish1').value;
    const wish2 = document.getElementById('wish2').value;
    const wish3 = document.getElementById('wish3').value;

    const message = `1. ${wish1}\n2. ${wish2}\n3. ${wish3}`;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS
    emailjs.init('2oLkdF0MbjFbovK35'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à User ID –∏–∑ EmailJS

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    emailjs.send('service_vvz1cvm', 'template_n3qxkku', {
        message: message
    }).then(function(response) {
        //alert('–í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    }, function(error) {
        //alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + JSON.stringify(error));
    });
});